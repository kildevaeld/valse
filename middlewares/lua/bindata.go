// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x8e\xdb\x36\x10\x3d\x4b\x5f\xf1\x9a\x4b\x24\x54\x12\x92\x43\x2e\x45\x14\xa0\x68\x16\xed\x21\x45\x8b\x36\x3d\x2d\x16\x06\x4d\x8d\x6c\x66\x29\xd2\x25\xa9\x38\x6e\xb1\xff\x5e\x0c\x49\xd9\x5a\x37\xdb\x04\xe8\xc5\xa2\x87\xf3\xde\x3c\xce\x3c\xb2\x6d\x21\xb5\xf0\xbe\xd3\xb3\x28\xdb\x16\x3f\xd8\xe9\x20\x82\xda\x6a\xc2\x51\x85\x3d\xde\xcd\x02\xaf\xba\x97\xa8\x8c\x0d\x78\xd5\xbd\xa8\xbb\x72\x9c\x8d\x0c\xca\x9a\x04\xac\xb6\xc2\x53\x03\x65\x54\xa8\x4b\x00\xda\x4a\xa1\x21\xd1\xe3\xef\x07\x00\x68\x5b\x08\x18\x3a\xa6\x6c\x28\xe3\x83\x30\x92\x38\x55\x8d\x60\x56\x86\x42\x98\x01\xe1\x74\xa0\x48\x57\xa3\xef\xf1\x7c\xa9\xf3\x1c\x61\x4f\x86\x01\x8c\xe1\xe4\x1e\x9c\x95\x23\xbc\x44\x0f\xa3\x34\x07\x48\x7b\x52\xe3\x35\x55\x10\x5b\x4d\x2b\x9e\xb6\x85\x9d\xdd\x5a\x96\x87\x80\xdf\x0b\xad\xed\x11\xd2\x1e\x4e\xb0\x23\xa7\x27\xf6\x98\xf3\x4d\xae\x37\x5a\x07\xd5\x7c\x84\x32\x38\x08\xe5\x7c\x2e\x33\xd8\xbc\x0f\x40\xde\xaa\x3b\xf4\xf8\x98\x23\x64\x86\xbc\x92\xdd\x26\xcb\x5d\x0e\x90\xf7\xda\x36\x56\x4b\x62\x8e\x4a\x6b\x6c\x29\x46\x26\x0a\x22\xaa\x8f\x75\x85\xd6\x50\xc1\xc3\x6e\x3f\x90\x0c\xbe\xc9\xd0\xd8\xbc\x3d\x9d\x12\x52\x5b\x7b\x8f\xf9\xc0\x11\xe5\x98\x60\x6f\x07\x6e\x3c\x54\xe8\xca\x24\x62\xa3\xcc\x40\x9f\xd0\x43\x96\x99\x82\x3e\x1d\xac\x27\x08\x48\x6b\x7c\x70\xb3\x0c\xd6\xe1\xb8\x57\x72\x0f\x29\x0c\xab\x91\x42\x6b\x1a\xb0\x3d\xe1\x75\x94\x69\xc4\x44\x6f\xaa\xd7\xc2\xed\xfc\x9b\xd5\xe4\xa7\x10\x47\xcf\x81\x29\x74\x9b\x0d\xc3\xd0\x63\x19\x66\x15\xb1\x9b\xb0\xd5\x0d\xba\xae\x5b\x01\xed\xf6\xc3\x19\xe9\x29\x9c\x0f\x5e\xd9\xed\x87\x46\xd6\xd9\x30\x71\xfe\x57\x7e\x88\x19\x0b\x19\x1b\x00\x79\xb3\x6d\x31\x89\x7b\x82\x9f\x1d\x77\x53\xb0\xcd\x4e\xf0\x61\x1e\x47\x8c\xce\x4e\x57\x13\x66\x17\x30\x9f\x12\x5a\xfd\x45\xc3\x32\x70\x35\xa6\x1c\xee\x32\x2f\xba\x6b\x0d\xe7\x60\x14\x72\x3e\xd6\x65\xba\xf9\xe3\x28\xcc\xce\xf0\x41\x57\x41\xd9\x65\x4b\xf3\x27\x07\xfc\x46\xac\x5b\xe6\x49\x8f\x0d\xee\x59\xe2\x42\x9c\x7b\x8d\x1e\xbb\x75\xab\x38\x73\x49\x39\xee\x95\x26\x4c\x18\x2c\x2e\xce\x54\x23\x83\xfa\x44\x16\xcf\xb0\xa8\x0a\x6e\xa6\x95\x53\x79\x7c\xe8\x31\x25\xc3\xfe\xcb\xc8\x19\x34\x0a\xfd\xc8\xc6\x8f\xe6\x26\x1b\x4c\xe9\x4d\xc8\xd9\xb2\xe4\xb4\xb2\x6d\x6f\x6f\xcb\x74\x00\x91\x26\x9e\xfe\x38\x3b\x07\xf2\x1c\x29\x8b\x83\xf5\xc9\x47\x4d\x59\xec\x28\x5b\xea\xe1\xf2\xf4\x38\xda\x29\x1f\xc8\x55\x93\x1a\x06\x4d\x47\xe1\xa8\x2e\x8b\xc4\xc3\x76\x8b\x0a\xba\x1d\x05\x53\x89\xba\x2c\xc4\xad\xe6\x0b\x79\x49\x4e\x4a\x2e\x74\xb3\xf9\xf9\xbc\xe7\x2b\x47\x7f\x36\x70\xe4\xeb\xb2\xe0\x5b\xb7\x69\x70\x7f\xb9\xee\xa2\x06\x5f\xf6\x22\x57\x73\x51\xdd\xfd\x1a\x53\xe4\x87\x8d\xb7\xa2\x4d\x8a\xa2\x78\xd4\xb0\xa2\xe0\xf2\xe9\x67\xd5\xfe\x28\xaa\x6d\xef\xee\xca\xf2\x37\xee\x85\xe3\x0b\x1a\xdf\xd8\xb3\x15\x44\x8d\xb2\x10\x9d\x1a\xd0\xe3\x05\xaf\x2e\x4d\x7b\x60\x78\x5d\xae\x4e\x95\x48\xbe\x8b\x29\x55\x7a\x07\x1a\x1c\x44\xd8\x37\x18\x4d\x5d\x16\xec\x96\x44\xb5\xac\xbe\xc5\xcb\x1c\x4e\xbc\xb7\x79\x83\x9b\x37\x9a\xb2\xd8\x6c\xa4\x23\x11\x68\xf3\x39\xce\x9c\x5b\x5f\xf5\x36\xab\xd8\x51\xa8\xae\x6a\x67\x65\xcf\x7e\xbc\x79\xff\x6c\x2d\xec\xb3\x78\x76\xc4\x53\x04\xbf\xfe\xf2\xfb\xd7\x30\xcc\x4f\x13\xfc\xf1\x15\xf8\x81\x34\x05\x7a\x8a\xe2\xed\xcd\xbb\x9b\xf7\x37\x5f\x66\xd9\x93\x18\x2e\x1c\x78\x4c\xf2\xd3\xcd\xf7\x6f\xbf\x4c\x31\x7b\xaa\xfe\xef\x00\x2f\x57\xa1\xfa\xef\xb9\x05\xa7\x76\x3b\x72\x95\x1a\xd8\xde\x67\x8f\x67\xdb\xae\x4b\xa9\xe1\x6e\x75\x0b\x22\x59\xe9\x16\x1f\x27\xb6\xaa\xfe\x27\x00\x00\xff\xff\xe2\xb2\xd2\x2f\x70\x08\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 2160, mode: os.FileMode(420), modTime: time.Unix(1499099643, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

