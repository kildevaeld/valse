// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xc1\x6e\x83\x30\x0c\x3d\xc7\x5f\xf1\xd4\x13\x48\xa8\x7f\xc0\x71\xda\x69\xda\xa4\xed\x56\x4d\x53\x56\x4c\x8b\x9a\x26\xad\x13\xb4\xc3\xd4\x7f\x9f\x92\x00\x41\x8c\x03\x04\xdb\xcf\xef\xd9\x2f\x64\xdc\x51\x1b\x68\xb4\xf8\x7d\x4c\x3f\xe2\xc6\xc0\x3e\x46\x48\xdd\x9c\x0f\x29\xd7\x90\x3a\x71\x3e\xd2\x83\xfa\xd1\x1e\xc3\xe0\x2c\x84\x4f\x83\x0f\x2c\xd5\x75\xe8\x3a\xc3\x3f\x5a\xb8\x26\x95\xfb\x18\xb4\x08\xfa\xdb\xf0\xfe\xc4\xc1\x56\xba\x26\xa5\x0f\xe6\x13\x2d\x4a\x31\xb1\xed\x68\xd5\x6e\xb4\x2f\x4b\xce\x57\xc2\xf7\x06\xc2\xbe\xa6\xb9\xa7\x90\x1a\x7a\x08\xdf\xf7\x57\x0e\x67\xd7\xa1\x6d\xb1\x7b\x7e\xfa\xd8\x21\x9c\xd9\x92\x52\x82\x76\x1a\x20\xb2\x92\x8a\xfd\x01\xe0\x3f\xea\xed\xf5\x7d\x86\x61\x7a\x56\xe0\x38\x78\x8a\x27\x81\x99\x75\xe6\xe8\x9d\xe0\xa6\xc3\xb9\xc9\xc5\x18\x2c\x6e\x7a\x10\x5f\x49\x8d\xce\x91\x52\xb1\x3a\x16\x44\x9e\xc8\x9a\xce\x13\x38\x25\xad\x0b\x19\x5b\x46\x2c\x79\x25\x1c\x46\xb1\xe8\xb5\xf1\x9c\x22\x51\xc3\xf2\x49\xef\xa4\x2a\x09\xf9\x6a\x70\x29\x0a\x74\x8d\x2c\x61\x5a\x57\xb2\xec\xb2\x5a\x64\xa1\xe7\xb0\x50\x6e\x08\x17\x86\x39\x11\x64\x9c\x9c\x4a\xa2\x25\x5f\x83\x95\x6d\x29\x1a\x17\x5e\xe5\xbd\xf4\xb6\x26\x55\x6c\x38\xc4\x68\x34\xbe\xb7\x5b\xc3\x33\x32\x6e\x7b\x05\x4d\x5e\x14\x1f\x36\xf0\xbf\x00\x00\x00\xff\xff\xe7\xc2\x19\x65\xb4\x02\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 692, mode: os.FileMode(420), modTime: time.Unix(1498992932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

