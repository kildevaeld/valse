// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdc\x36\x17\x5d\x5b\x4f\x71\x3e\x7d\x0b\x4b\xa8\x46\x49\x16\xd9\x14\x56\x80\xa2\x31\x9a\x45\x8a\x16\x6d\xba\x0a\x02\x81\x43\x5d\xcd\x30\x43\x91\x2a\x49\x79\xe2\x06\xee\xb3\x17\xfc\x91\x46\x9e\x8c\x9b\x00\xdd\x78\x04\xf2\xdc\x73\xff\x0e\xef\xf5\x66\x03\x2e\x99\xb5\xb5\x9c\x58\xb6\xd9\xe0\x47\x3d\x8c\xcc\x89\xad\x24\x1c\x85\xdb\xe3\xed\xc4\xf0\xb2\x7e\x81\x42\x69\x87\x97\xf5\xf3\xb2\xce\xfa\x49\x71\x27\xb4\x8a\x86\xc5\x96\x59\xaa\x20\x94\x70\x65\x06\x40\x6a\xce\x24\x38\x1a\x7c\x7e\x00\x80\xcd\x06\x0c\x8a\x8e\x11\x0d\xa1\xac\x63\x8a\x93\x87\x8a\x1e\x9e\xd5\x9b\x82\xa9\x0e\xee\x7e\xa4\x40\x57\xa2\x69\x70\x3d\xfb\xb9\x86\xdb\x93\xf2\x06\xde\xc6\x83\x1b\x78\x54\x3a\xf1\x9f\x68\xa0\x84\xf4\x07\x24\x2d\x89\xfe\x9c\xca\xb1\xad\xa4\x15\xcf\x66\x03\x3d\x99\x75\x58\x16\x0c\x76\xcf\xa4\xd4\x47\x70\x3d\xde\x43\xf7\x1e\x1e\xd9\x03\xe6\x7f\xc9\x5f\xaf\x0d\x44\x75\x07\xa1\x30\x32\x61\x6c\x72\xd3\xe9\x74\x0f\x80\xbf\x17\x1f\xd0\xe0\x2e\x9d\x90\xea\xd2\x17\xaf\xdb\x14\xee\x9c\x40\xba\xdb\x6c\x82\xb7\x18\xcc\x51\x48\x89\x2d\x85\x93\x81\x1c\x0b\xd1\x07\xbf\x4c\x4a\x08\x67\xa1\xb7\x1f\x89\x3b\x5b\x25\xd3\x50\xbc\x3d\xdd\x47\x4b\xa9\xf5\x01\xd3\xe8\x4f\x84\xf1\x04\x7b\xdd\xf9\xc2\x43\xb8\x3a\x8b\x41\xb4\x42\x75\xf4\x09\x0d\x78\x96\x28\xe8\xd3\xa8\x2d\x81\x81\x6b\x65\x9d\x99\xb8\xd3\x06\xc7\xbd\xe0\x7b\x70\xa6\x7c\x34\x9c\x49\x49\x1d\xb6\xf7\xb8\x09\x61\x2a\x36\xd0\xab\xe2\x86\x99\x9d\x7d\xb5\xea\xfc\xe0\x42\xeb\xfd\xc1\xe0\xea\xb6\xf5\x66\x68\x30\x37\xb3\x08\xb6\xad\xdb\xca\x0a\x75\x5d\xaf\x0c\xf5\xf6\xe3\x62\x69\xc9\x2d\x89\x17\x7a\xfb\xb1\xe2\x65\x12\x4c\xe8\xff\x99\x1e\x02\x62\x26\xf3\x02\x40\xba\xdc\x6c\x30\xb0\x03\xc1\x4e\xc6\x57\x93\x79\x99\xdd\xc3\xba\xa9\xef\xd1\x1b\x3d\x9c\x75\xd8\xab\xc0\xf3\x09\x26\xc5\x5f\xd4\xcd\x0d\x17\x7d\xc4\xf8\x2a\xfb\x8f\xfa\x3c\x86\xe5\x30\x04\xb2\xa4\x75\xea\x6e\xfa\x31\xe4\x26\xa3\x7c\xa2\xab\x43\x5e\x27\x49\xfb\x9f\x74\x60\x5b\xb6\x2e\x99\x25\xd9\x57\x38\xf8\x10\x67\xe2\x54\x6b\x34\xd8\xad\x4b\xe5\x91\x33\xe4\xb8\x17\x92\x30\xa0\xd3\x38\x29\x53\xf4\xde\xa8\x89\x64\x21\x87\x39\x2a\x67\x26\x5a\x29\xd5\xb7\x0f\x0d\x86\x28\xd8\x2f\x84\x9c\x8c\x7a\x26\x1f\xc9\xf8\x51\xdf\x78\x85\x21\xce\x84\x84\xe6\x99\x87\x65\xbf\xe9\xc9\x91\xf1\xe2\x0b\xf3\x63\x49\x93\x95\xc8\xae\x58\x2d\x3a\x34\x78\xee\xbf\x8c\x07\xda\x28\x0a\x52\x5d\x99\x65\xa7\xd9\x13\x49\xbe\x0f\x90\x22\x6a\xbc\xc2\xc8\xdc\xbe\x42\xaf\xca\xec\xca\x57\x22\x52\xcd\x5f\xdf\xe1\x45\x3a\x8e\xbc\xef\xd3\x85\x7f\xa9\xbd\xca\xae\xda\x96\x1b\x62\x8e\xda\x4b\x9c\x09\x5b\xc6\x0c\xce\xa3\xd8\x91\x2b\xce\x7c\xa7\xc8\xf2\x9f\x6e\xdf\xe5\xeb\xc0\x2e\xda\x8f\xda\x3e\x49\xf0\xeb\x2f\xbf\x7f\x0b\xc3\xf4\x34\xc1\x1f\xdf\x60\xdf\x91\x24\x47\x4f\x51\xbc\xbe\x7d\x7b\xfb\xee\xf6\xeb\x2c\x7b\x62\xdd\x89\x03\x8f\x49\xde\xdc\xfe\xf0\xfa\xeb\x14\x93\xa5\xe2\xbf\x36\x70\x10\x5d\x27\xe9\xc8\x4c\x7c\x10\x4f\xf7\xcd\x19\xb1\xdb\x91\x29\x44\x57\xc1\xd0\x9f\xfe\x8f\x2d\xb3\xab\x24\xd7\xb5\x2b\xd1\x7d\x28\x4e\x88\x40\xe6\xb7\xe5\x9b\x77\x3f\xbf\x85\x21\xd5\x91\x21\x93\x65\xf1\x55\x2e\x5e\xd8\x38\x92\xea\x5a\x26\x65\xb1\x9d\xfa\x9e\xcc\x32\x1b\xc2\x0e\x69\x5e\x54\x96\x24\x71\x57\xe4\xff\xcf\xe3\xd5\xbc\x45\xc2\x03\xaa\x85\xb2\x64\xdc\x62\x5b\x24\xb4\x88\xd8\xd2\x13\xf9\x48\x42\x34\xd1\xf5\x9d\x16\x5d\xeb\xd8\x2e\x3c\x9a\x0c\x10\xc3\x0e\x4d\x78\xda\x7e\x55\xf8\x31\xef\x78\x5d\xd7\xd9\xc3\x17\xb1\x6e\x27\x21\x83\x69\xe1\xd8\xae\xf5\xb3\xbd\x82\x1e\x5d\x18\x38\x11\x1a\xc3\xf0\xc4\xf9\x4d\x5e\x61\x86\xf9\x79\x3d\x2f\xdc\x60\xe0\xc7\x4b\x1e\x12\xc8\x4f\x43\xd2\x27\x7c\x58\x2f\xcd\x08\x5d\x96\xe6\xcc\x70\x28\xf1\x77\x83\x5c\x4d\xc3\x96\x4c\xbe\x1e\xb2\xb8\x54\xce\x1c\x79\x85\x43\x85\xeb\x26\xbf\xae\x70\x57\xe1\x3a\xbf\x3e\x9b\xbd\xe9\x37\x14\x29\xf8\x59\x6a\xf4\x7e\x4e\xe1\xc3\xc9\xcf\x45\x1f\xcf\x5e\xe5\xa1\xd6\x69\xd6\x5d\x04\x45\xc8\xb7\x94\xe2\xa2\xfd\xa4\x46\xc6\x0f\xd1\x2a\x12\x2d\xde\x2e\xe2\xe7\xd6\x9c\xd2\xbc\x14\xd4\xcd\xb3\x55\xa3\x96\x20\x53\x29\xe6\xb9\x1f\xa4\xc6\xb5\xe2\x6c\x96\xda\x2c\xf0\xd5\x83\x89\x1a\x6f\xf7\x6e\x90\xe1\x79\x86\x51\xdf\x93\xba\x2b\x7a\x55\x3d\x1e\xfb\x9f\x1f\xaa\xa0\x3d\xe0\xf4\x6f\xc6\xd9\x2a\x9b\x43\x2a\xcf\xb6\xc9\x8c\x3a\x65\xb7\xba\xfd\x37\x85\x7e\xd9\xef\x87\xb2\x5c\x25\xd9\xab\x62\x49\xca\xcc\xeb\x27\x0e\x81\xa2\xcc\xb2\x7f\x02\x00\x00\xff\xff\x30\x11\xa3\x3a\x05\x0b\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 2821, mode: os.FileMode(420), modTime: time.Unix(1499237289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

